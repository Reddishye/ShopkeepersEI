plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'es.redactado'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        url = uri("https://repo.projectshard.dev/repository/snapshots/")
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT" // spigot api

    annotationProcessor 'org.projectlombok:lombok:1.18.32' // lombok anotation processor (used only in configurate-yaml)

    implementation "org.spongepowered:configurate-yaml:4.1.2" // config files
    implementation "com.google.inject:guice:7.0.0" // dependency injection
    implementation "net.kyori:adventure-text-serializer-plain:4.16.0" // text serializer
    implementation "net.kyori:adventure-text-serializer-legacy:4.16.0" // text serializer
    implementation "net.kyori:adventure-platform-bukkit:4.3.2" // adventure platform
    implementation "net.kyori:adventure-text-minimessage:4.16.0" // minimessage
    implementation "net.kyori:adventure-api:4.16.0" // adventure api
    implementation "org.slf4j:slf4j-api:2.0.0-alpha1" // logging

    compileOnly 'com.nisovin.shopkeepers:ShopkeepersAPI:2.23.1-20241003.151032-2'

    compileOnly "org.projectlombok:lombok:1.18.32" // lombok

    implementation files('src/main/resources/SCore.jar') // SCore plugin (EI/EB/EE)
}


def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

shadowJar {
    version = version
    archiveClassifier.set('') // remove the classifier
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
